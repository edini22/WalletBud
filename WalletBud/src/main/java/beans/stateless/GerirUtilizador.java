package beans.stateless;

import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.json.Json;
import jakarta.json.JsonObject;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import org.orm.PersistentException;
import org.orm.PersistentSession;
import wb.walletbud.User;
import wb.walletbud.UserDAO;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Stateless
public class GerirUtilizador {

    @EJB
    private GerirCategoria gerirCategoria;

    private static final String API_URL = "https://api.mailersend.com/v1/email";
    private static final String API_TOKEN = "mlsn.005e1b9ef2f0a2961a46c6ad132698cc6c446d7e93d3a333cd1fdd82203628c5";
    private static String BASE64LOGO = "";


    private String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder(2 * hash.length);
        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }

    public boolean createUser(PersistentSession session, String name, String password, String email) throws PersistentException {
        try {

            User u = getUserByEmail(session, email);

            if (u != null) {
                return false;
            }

            User user = UserDAO.createUser();
            user.setName(name);
            user.setEmail(email);

            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(
                    password.getBytes(StandardCharsets.UTF_8));
            String hashedPassword = bytesToHex(encodedhash);

            user.setPassword(hashedPassword);

            UserDAO.save(user);

            if(gerirCategoria.createDefaultCategorias(user) != 0){
                return false;
            }

            System.out.println("User inserido!");
            return true;
        } catch (Exception e) {
            System.out.println("User não inserido!");
            return false;
        }
    }

    public boolean editUser(PersistentSession session, String name, String password, String email, String idioma,String new_email, Float objetivo) throws PersistentException {
        try {

            User u = getUserByEmail(session, email);

            if (u == null) {
                System.out.println("email do token errado!");
                return false;
            }
            if (name != null) u.setName(name);
            if (password != null) {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] encodedhash = digest.digest(
                        password.getBytes(StandardCharsets.UTF_8));
                String hashedPassword = bytesToHex(encodedhash);

                u.setPassword(hashedPassword);
            }
            if (idioma != null) u.setIdioma(idioma);
            if (new_email != null) {
                //verifica se existe algum ‘user’ com o endereço eletrónico
                User us = getUserByEmail(session, new_email);
                if (us != null) {
                    return false;
                }
                u.setEmail(new_email);
            }
            if(objetivo!= null) u.setObjetivo(objetivo);

            UserDAO.save(u);

            System.out.println("User editado!");
            return true;
        } catch (Exception e) {
            System.out.println("User não editado!");
            return false;
        }
    }

    public int verifyUser(PersistentSession session, String email, String password) throws PersistentException {
        try {
            User user = getUserByEmail(session, email);

            if (user == null) {
                return -3;
            }

            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(
                    password.getBytes(StandardCharsets.UTF_8));
            String hashedPassword = bytesToHex(encodedhash);

            String condition = "email = '" + email + "' AND password = '" + hashedPassword + "'";

            User[] users = UserDAO.listUserByQuery(session, condition, null);

            if (users.length == 0) {
                return -1;
            } else {
                return 0;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return -2;
        }

    }

    public User getUserByEmail(PersistentSession session,String email) throws PersistentException {
        try {
            String condition = "email = '" + email + "'";
            User[] users = UserDAO.listUserByQuery(session, condition, null);

            if (users.length == 0) {
                return null;
            }
            return users[0];
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public JsonObject getJsonUserInfo(PersistentSession session, String email) throws PersistentException {
        try {
            User user = getUserByEmail(session, email);

            if (user == null) {
                return Json.createObjectBuilder()
                        .build();
            }

            JsonObject userJson = Json.createObjectBuilder()
                    .add("id", user.getId_user())
                    .add("name", user.getName())
                    .add("email", user.getEmail())
                    .add("balanco", user.getSaldo())
                    .add("idioma", user.getIdioma())
                    .add("objetivo",user.getObjetivo())
                    .build();
            System.out.println(userJson.toString());

            return userJson;
        } catch (Exception e) {
            e.printStackTrace();
            return Json.createObjectBuilder()
                    .build();
        }
    }

    public int resetPassword(PersistentSession session, User user, String token, String password) throws PersistentException {

        Timestamp time = new Timestamp(System.currentTimeMillis());
        if (!user.getToken().equals(token) || user.getExpToken().before(time)) {
            return -1;
        }

        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            return -1;
        }

        byte[] encodedhash = digest.digest(
                password.getBytes(StandardCharsets.UTF_8));
        String hashedPassword = bytesToHex(encodedhash);

        user.setPassword(hashedPassword);
        UserDAO.save(user);

        return 0;
    }

    public int sendRecoveryToken(PersistentSession session, User user) throws PersistentException {

        byte[] b = new byte[20];
        new Random().nextBytes(b);

        String token = Arrays.toString(b);

        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.HOUR_OF_DAY, 24);
        long timeInMillis = calendar.getTimeInMillis();

        Timestamp time = new Timestamp(timeInMillis);

        user.setToken(token);
        user.setExpToken(time);
        UserDAO.save(user);

        String template = loadTemplate("email_templates/email_template_en.html");

        try {
            sendEmail(
                    user.getEmail(),
                    user.getName(),
                    "walletbud@trial-jy7zpl9xp6pl5vx6.mlsender.net",
                    "Wallet Bud",
                    "[WB] Password recovery",
                    "",
                    escapeHtml(template),
                    token
            );
        } catch (IOException e) {
            return -1;
        }


        return 0;
    }

    public static String escapeHtml(String html) {
        if (html == null) {
            return null;
        }
        return html.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\b", "\\b")
                .replace("\f", "\\f")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }

    public static String replacePlaceholder(String html, String placeholder, String replacement) {
        // Escape special characters in the placeholder for regex
        String escapedPlaceholder = Pattern.quote(placeholder);

        // Construct regex pattern to find the placeholder
        String regex = escapedPlaceholder;
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(html);

        // Replace all occurrences of the placeholder with the replacement string
        String replacedHtml = matcher.replaceAll(Matcher.quoteReplacement(replacement));

        return replacedHtml;
    }

    public static String loadTemplate(String templateName) {
        InputStream inputStream = GerirUtilizador.class.getClassLoader().getResourceAsStream(templateName);
        if (inputStream == null) {
            throw new RuntimeException("Template not found: " + templateName);
        }
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (Exception e) {
            throw new RuntimeException("Error reading template", e);
        }
    }

    public static void sendEmail(String recipientEmail, String recipientName, String senderEmail, String senderName, String subject, String text, String html, String token) throws IOException, IOException {
        OkHttpClient client = new OkHttpClient();


        String replacedHtml = replacePlaceholder(html, "{$user}", recipientName);
        replacedHtml = replacePlaceholder(replacedHtml, "{$token}", token);


        String json = "{"
                + "\"from\": {\"email\": \"" + senderEmail + "\", \"name\": \"" + senderName + "\"},"
                + "\"to\": [{\"email\": \"" + recipientEmail + "\", \"name\": \"" + recipientName + "\"}],"
                + "\"subject\": \"" + subject + "\","
                + "\"text\": \"" + text + "\","
                + "\"html\": \"" + replacedHtml + "\","
                + "\"personalization\": [{"
                + "\"email\": \"" + recipientEmail + "\","
                + "\"data\": {\"user\": \"" + recipientName + "\"}"
                + "}],"
                + "\"attachments\": [{"
                + "\"content\": \"" + BASE64LOGO + "\","
                + "\"disposition\": \"inline\","
                + "\"filename\": \"image.png\","
                + "\"id\": \"image_cid\""
                + "}]"
                + "}";

        RequestBody body = RequestBody.create(json, okhttp3.MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(API_URL)
                .post(body)
                .addHeader("Authorization", "Bearer " + API_TOKEN)
                .addHeader("Content-Type", "application/json")
                .build();

        try (okhttp3.Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("Unexpected code " + response);
            }
        }
    }

}
